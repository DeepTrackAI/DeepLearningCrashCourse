name: "Prune old GHCR images"

on:
  schedule:
    - cron: '0 2 * * *'      # daily at 02:00 UTC
  push:
    branches: [ docker ]
  registry_package:
    types: [ published ]

permissions:
  contents: read
  packages: write

jobs:
  prune:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
            | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
            | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Delete all non-`:latest` versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER:   ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          for IMAGE in deep-learning-crash-course deep-learning-crash-course-gpu; do
            echo
            echo "üîç Processing package: $OWNER/$IMAGE"
            versions=$(gh api --paginate \
              -H "Accept: application/vnd.github.v3+json" \
              /orgs/$OWNER/packages/container/$IMAGE/versions)

            # Only delete versions *not* tagged "latest"
            echo "$versions" \
              | jq -c '.[] | select((.metadata.container.tags // []) | index("latest") | not)' \
              | while read version; do

                id=$(echo "$version" | jq -r '.id')
                tags=$(echo "$version" | jq -r '.metadata.container.tags[]')
                echo "‚Üí Deleting version $id (tags: $tags)"
                for attempt in 1 2 3; do
                  if gh api -X DELETE \
                       -H "Accept: application/vnd.github.v3+json" \
                       /orgs/$OWNER/packages/container/$IMAGE/versions/$id; then
                    echo "   ‚úÖ Deleted $id"
                    break
                  else
                    echo "   ‚ö†Ô∏è Attempt $attempt failed, retrying‚Ä¶"
                    sleep $((5*attempt))
                  fi
                done
              done
          done
